[
    {
        "buttonTitle":"Angular Web Application",
        "title": "My Portfolio Angular Web Application",
        "tools": "Front End Framework: Angular\nProgramming Languages: Typescript",
        "githubLink": "https://github.com/mezamarco/AngularMyWebsite",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"This is the website that you are currently exploring. This is the first weba pplication that I build using the Angular Framework."
    },
    {
        "buttonTitle":"First website( HTML and CSS)",
        "title": "First webssite",
        "tools": "Programming Langauges:HTML/CSS, PHP,JavaScript.\nDdatabases: MySQL",
        "githubLink": "",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"This is was my first portfolio attempt. I built this website when I was just starting to learn how to created websites, I've gotten a lot beting since I created this website  is a website that reminds me of how I began. You will notice similarites between this Agularwb app, Iit similar because it;s arecreation of this site , but done in the ANgular Framework\nAlso, go and test out the functionality of storing information and displaying the contents of the MySQL database."
    },
    {
        "buttonTitle":"Solving Interview Coding Problems",
        "title": "Solving Interview Coding Problems",
        "tools": "Programming Language: C/C++ and Java\nIDE: Visual Studio and Eclipse\nText Editor: Vim",
        "githubLink": "https://github.com/mezamarco/Cracking-the-Coding-Interview-Solutions",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"Description: I am currently trying to solve every problem that is in the Cracking The Coding Interview book. I am also preparing myself by doing the Leetcode programming challenges."
    },
    {
        "buttonTitle":"System, ISP, and Weather Information",
        "title": "System, ISP, and Weather Information",
        "tools": "Programming Language: Python\nIDE: PyCharm",
        "githubLink": "",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"Description: Utilizing multiple APIs, I request your system information, your service provider information, and your current weather information. Utilizing the ipinfo.io API, we get all your service provider information. Utilizing the OpenWeatherMap API, we get all the weather information of your current location. Utilizing the psutil, platform, and cpuinfo libraries, we get all your system information. "
    },
    {
        "buttonTitle":"Parking Lot",
        "title": "Parking Lot",
        "tools": "TOOLS",
        "githubLink": "https://github.com/mezamarco/DesignParkingLot",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"Description: Implement a Parking Lot that contains the following functions: insertVehicle, removeVehicle, parkingSpotInfo, vehicleCanFit, etc. \n"
    },
    {
        "buttonTitle":"Python Calculator",
        "title": "Parking Lot",
        "tools": "Programming Language: Python\nIDE: PyCharm",
        "githubLink": "https://github.com/mezamarco/CalculatorPython",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"Description: My unique calculator, I built it using the Python programming language. \nTo display the input, buttons, and output, I am using the Tkinter grid layout. \nMy calculator has the expected functions: \nMultiply \nDivide \nAdd \nSubtract \nAdditionally, I gave it extra special functions: \nIt can give you the Factorial number of any number \nIt can give you the Nth-Fibonacci number of any number."
    },
    {
        "buttonTitle":"Calculator (MVC)",
        "title": "Calculator using MVC",
        "tools": "Programming Language: Java\nIDE: Eclipse",
        "githubLink": "https://github.com/mezamarco/MVC-Calculator",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"Description: Implement a calculator that has the following functions: add, subtract, multiply, division, mod, factorial, and gets the nth Fibonacci number. \nMy program will display a Graphical User Interface (JPanel), so the user can use the calculator."
    },
    {
        "buttonTitle":"Hangman Game",
        "title": "Hangman Game",
        "tools": "Programming Language: C++\nText Editor: Vim",
        "githubLink": "https://github.com/mezamarco/HangmanGame",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "todo"
            }
        ],
        "description":"Description: Play the classic word game, Hangman."
    },
    {
        "buttonTitle":"Blackjack Game",
        "title": " Blackjack Game",
        "tools": "Programming Language: C++\nIDE: Visual Studio",
        "githubLink": "https://github.com/mezamarco/Blackjack",
        "images":[
            {
                "path": "assets/images/code1.jpg",
                "alt": "laptop1"
            }
        ],
        "description":"Description: Play Blackjack.\nYou will start with $1000, keep on betting and make more money. If you lose the $1000, its game over."

    },
    {       
        "buttonTitle":"Zig Zag Game App",
        "title": " Zig Zag Game App (Summer 2015)",
        "tools": "Programming Language: C#\nEngine: Unity",
        "githubLink": "https://github.com/mezamarco/zigzagGame",
        "images":[
            {
                "path": "assets/images/code2.jpg",
                "alt": "laptop2"
            }
        ],
        "description": "Compatible with any Android Device.\nDescription: Touch the screen to change direction andavoid falling off the platform"
    },
    {     
        "buttonTitle":"Binary Search Tree",
        "title": "Binary Search Tree (UC San Diego Project Assignment)",
        "tools": "Programming Language: C++\nText Editor: Vim",
        "githubLink": "This repo is private.",
        "images":[
            {
                "path": "assets/images/bst.png",
                "alt": "bst"
            }
        ],
        "description":"Implement a Binary Search Tree that can has an insert function, find function, and a printTree function. \n\nTo complete this project I had two classes:(class BST and class Node)\n\n The BST class: This class would have a root pointer that would point to the root node.\n Also this class would have a counter for the number of Nodes created.\n\n The Node Class: This class would hold the given key and several pointers. Every node would contain an integer variable value.\n Every node would have a parent pointer, a leftChild pointer, and a rightChild pointer.\n\n We would receive a vector of integers and then construct the BST using all the elements in the vector.\n \n Run time for inserting and finding an element:\n Average case scenario:  O(log n)\n Best case scenario: O(1)\n Worst Case scenario: O(n)\n"
    },
    {   
        "buttonTitle":"Multi-way Trie",
        "title": "Multi-way Trie (UC San Diego Project Assignment)",
        "tools": "Programming Language: C++\nText Editor: Vim",
        "githubLink": "This repo is private.",
        "images":[
            {
                "path": "assets/images/dictionary.jpg",
                "alt": "MWT"
            }
        ],
        "description": "Description: Use a Huffman tree to compress data efficiently into a file and then decompress the file without any data loss.\n\n To complete this project I would need two classes: \n(class HuffmanTree and class Node) \n\n The HuffmanTree class:\n This class will had a vector of 256 pointers(One pointer for each character that can be found in the ASCII table): We would have a pointer point to a node, if we see the given character in the given file. \nThis class would also hold a counter for the number of nodes created.\n\n For functions: buildTree function, the parameter of this function would be a vector with the frequency count of every character. This build function would build our huffmanTree.\n\n The Node class:\nEvery node would contain the character symbol and also the count frequency. Also it would have three pointers, one for the parent, one for the left child , and one for the right child. \n\nTo compress a file: We would read a file character by character, and then count the frequency for each character. According to the frequencies, we would then build our Huffman Tree. \n\nThe Huffman tree would allow us to encode the most frequent character with the least amount of data encoding, while the less frequent character would have larger encoding. We would encode the entire file and in the end we would have a compressed file that has a smaller data size than our original file. \n\n The decompress file: Rebuild the same Huffman tree by using the frequency data from the compressed file.\n Take the encoded message and decode it using the Huffman tree. The end result would be the original file."

    },
    {        
        "buttonTitle":"File Compression and Decompression using a Huffman Tree",
        "title": "File Compression and Decompression using a Huffman Tree (UC San Diego Project Assignment)",
        "tools": "Programming Language: C++\nText Editor: Vim",
        "githubLink": "This repo is private.",
        "images":[
            {
                "path": "assets/images/binary.png",
                "alt": "binary"
            }
        ],
        "description": "Description: Use a Huffman tree to compress data efficiently into a file and then decompress the file without any data loss.\n\n To complete this project I would need two classes: \n(class HuffmanTree and class Node) \n\n The HuffmanTree class:\n This class will had a vector of 256 pointers(One pointer for each character that can be found in the ASCII table): We would have a pointer point to a node, if we see the given character in the given file. \nThis class would also hold a counter for the number of nodes created.\n\n For functions: buildTree function, the parameter of this function would be a vector with the frequency count of every character. This build function would build our huffmanTree.\n\n The Node class:\nEvery node would contain the character symbol and also the count frequency. Also it would have three pointers, one for the parent, one for the left child , and one for the right child. \n\nTo compress a file: We would read a file character by character, and then count the frequency for each character. According to the frequencies, we would then build our Huffman Tree. \n\nThe Huffman tree would allow us to encode the most frequent character with the least amount of data encoding, while the less frequent character would have larger encoding. We would encode the entire file and in the end we would have a compressed file that has a smaller data size than our original file. \n\n The decompress file: Rebuild the same Huffman tree by using the frequency data from the compressed file.\n Take the encoded message and decode it using the Huffman tree. The end result would be the original file."
    },
    {
        
        "buttonTitle":"Six Degrees of Kevin Bacon",
        "title": "Six Degrees of Kevin Bacon (UC San Diego Project Assignment)",
        "tools": "Programming Language: C++\nText Editor: Vim",
        "githubLink": "This repo is private.",
        "images":[
            {
                "path": "assets/images/network.png",
                "alt": "network"
            }
        ],
        "description":"Six Degrees of Kevin Bacon is a parlor game based on the six degrees of separation concept,\nwhich posits that any two people on Earth are six or fewer acquaintance links apart.\n\n The goal is to find the Bacon Number, which is the separation number between Kevin Bacon and another hollywood star.\n\n To complete this project I had two classes: (class Graph and class Node)\n\n The Node class: Every Node would have the name of the actor and a set of pairs: pair(year,movie) \nAlso every node would have have an adjacency vector, it would create imaginary edges to the other nodes if there exists a relationship. \n\nThe Graph class: The graph would contain a node counter. \nI implemeted a makeEdges function, this function would take in the entire graph and create the imaginary edges. \nTo find the bacon number, I would run the Breadth First Search algorithm, to find the shortest paths between Kevin Bacon and the other hollywood actor. \nThe number of traversed nodes using this shortest path would be the Keving Bacon number for given hollywood actor."
    }
]
